1 - Handling Disjunctions and Full Set of Mixed Constraints

Notes: To precisely handle disjunctions we need to encode every variable into automaton. This will probably not be an efficent way. We will make improvements by loosing precision or by selecting a subset of variables (automatically or manually) that we are interested in solving/counting. Note that we do not need to combine string and integer automaton unless there is a disjunction.

Automata Construction Tasks:
  1- Refactor automaton classes: Generate a set of MONA related automaton methods to use in automata construction. Mona C++ wrapper function names starts with "DFA" prefix.

  1.5 - Create base Formula class and have StringFormula and ArithmeticFormula inherit from it

  2- Combine "RelationalStringAutomaton" and "StringAutomaton" classes into one class called "StringAutomaton". A single variable string automaton will be equivalent to a relational string automaton with one variable. This will allow as to handle mixed constraints in a better way.

  4- Replace the usage of "IntAutomaton" with "UnaryAutomaton".

  3- Combine "BinaryIntAutomaton" and "IntAutomaton" classes into one class called "IntAutomaton". Only have binary representation here.

  4- Add support for boolean variables. Create a boolean automaton or use IntAutomaton.

Solver Tasks:
  1- Make sure disjucntions are not treated as a component.
  2- Using the refactoring automata construction create a disjunct automata that contains all variables under disjunction.
  3- Handle mixed constraint as defined in the baki's dissertation.



2- Improvements:

Notes: We may need to use some other automaton library. Make it easy to change underlaying automaton representation.

Tasks:
1- Define an abstract class that declares a set of automata related methods.
2- Define an abstract builder class that declares a set of automata construction methods.
3- Move underlaying automata related functions into a separate class that inherits from the class defined in task 1.
3- Implement a builder for each underlaying automata construction support.



StringAutomaton and Formulas - Tasks:
0. Every StringAutomaton should have a non-null StringFormula (even if basic StringFormula)
1. Make sure all non-relational StringAutomaton methods correctly implement task 0.
2. Currently IntAutomaton & UnaryAutomaton has a formula in order to make every auto work OK. This is just a hack, find better solution.
